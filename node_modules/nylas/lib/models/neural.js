"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var restful_model_1 = __importDefault(require("./restful-model"));
var neural_sentiment_analysis_1 = __importDefault(require("./neural-sentiment-analysis"));
var neural_signature_extraction_1 = __importDefault(require("./neural-signature-extraction"));
var neural_ocr_1 = __importDefault(require("./neural-ocr"));
var neural_categorizer_1 = __importStar(require("./neural-categorizer"));
var neural_clean_conversation_1 = __importDefault(require("./neural-clean-conversation"));
var neural_signature_contact_1 = __importDefault(require("./neural-signature-contact"));
var Neural = /** @class */ (function (_super) {
    __extends(Neural, _super);
    function Neural() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Neural.prototype.sentimentAnalysisMessage = function (messageId) {
        var body = { message_id: [messageId] };
        return this._sentimentAnalysis(body);
    };
    Neural.prototype.sentimentAnalysisText = function (text) {
        var body = { text: text };
        return this._sentimentAnalysis(body);
    };
    Neural.prototype.extractSignature = function (messageId, parseContact, options) {
        var _this = this;
        var body = { message_id: [messageId] };
        var path = 'signature';
        if (options) {
            body = __assign(__assign({}, body), options);
        }
        if (parseContact) {
            body['parse_contact'] = parseContact;
        }
        return this._request(path, body).then(function (json) {
            if (Array.isArray(json)) {
                json = json[0];
            }
            var signature = new neural_signature_extraction_1.default(_this.connection, json);
            if (parseContact !== false) {
                signature.contacts = new neural_signature_contact_1.default(_this.connection, signature.contacts);
            }
            return signature;
        });
    };
    Neural.prototype.ocrRequest = function (fileId, pages) {
        var _this = this;
        var body = { file_id: fileId };
        var path = 'ocr';
        if (pages) {
            body['pages'] = pages;
        }
        return this._request(path, body).then(function (json) {
            return new neural_ocr_1.default(_this.connection, json);
        });
    };
    Neural.prototype.categorize = function (messageId) {
        var _this = this;
        var body = { message_id: [messageId] };
        var path = 'categorize';
        return this._request(path, body).then(function (json) {
            if (Array.isArray(json)) {
                json = json[0];
            }
            var category = new neural_categorizer_1.default(_this.connection, json);
            category.categorizer = new neural_categorizer_1.Categorize(_this.connection, category.categorizer);
            return category;
        });
    };
    Neural.prototype.cleanConversation = function (messageId, options) {
        var _this = this;
        var body = { message_id: [messageId] };
        var path = 'conversation';
        if (options) {
            body = __assign(__assign({}, body), options);
        }
        return this._request(path, body).then(function (json) {
            // The Neural API will always return only one item
            // but sometimes it returns it in the form of a 'singleton' array
            if (Array.isArray(json)) {
                json = json[0];
            }
            return new neural_clean_conversation_1.default(_this.connection, json);
        });
    };
    Neural.prototype._sentimentAnalysis = function (body) {
        var _this = this;
        var path = 'sentiment';
        return this._request(path, body).then(function (json) {
            if (Array.isArray(json)) {
                json = json[0];
            }
            return new neural_sentiment_analysis_1.default(_this.connection, json);
        });
    };
    Neural.prototype._request = function (path, body) {
        if (!path) {
            path = this.constructor.collectionName;
        }
        return this.connection.request({
            method: 'PUT',
            path: "/neural/" + path,
            body: body,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    };
    return Neural;
}(restful_model_1.default));
exports.default = Neural;
